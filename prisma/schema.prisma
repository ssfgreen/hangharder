// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  description   String?
  homeGym       Gym?     @relation(fields: [homeGymId], references: [id])
  homeGymId     String?
  accounts      Account[]
  sessions      Session[]
  authoredExercises     Exercise[]  @relation("ExerciseAuthor")
  authoredSessions      WorkoutSession[]   @relation("SessionAuthor")
  authoredWorkouts      Workout[]   @relation("WorkoutAuthor")
  favouritedExercises   Exercise[]  @relation("ExerciseFavouriter")
  loggedExercises       Log[]
  followedBy            Follows[] @relation("Following")
  following             Follows[] @relation("Follower")
  logLikes       Log[] @relation("LogLikes")
}

model Gym {
  id            String    @id @default(cuid())
  name          String
  description   String
  location      String
  image         String
  website       String
  climbers      User[]
}

model Follows {
  id        String  @id @default(cuid())
  follower  User    @relation("Follower", fields: [followerId], references: [id])
  following User    @relation("Following", fields: [followingId], references: [id])
  followerId  String
  followingId String

  @@unique([followerId, followingId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Exercise {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  title       String
  summary     String
  description String?
  duration    Int?
  
  author      User     @relation("ExerciseAuthor", fields: [authorId], references: [id])
  authorId    String
  
  image       String?
  video       String?

  workout     Workout?

  favourited  User[]   @relation("ExerciseFavouriter")
  logs        Log[]
  tags        Tag[]
  sessions    WorkoutSession[]
}

model Tag {
  id          String   @id @default(cuid())
  name        String   @unique
  exercises   Exercise[]
  sessions    WorkoutSession[]
}

enum WorkOutTypes {
  TIMER
  CLIMBER
  REPREST
}

enum Category {
  CONDITIONING
  ENDURANCE
  FLEXIBILITY
  STRENGTH
  TECHNIQUE
  OPEN
  MINDSET
  FINGERS
  POWER
  OTHER
}

model Workout {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  type        WorkOutTypes
  duration    Int?

  repDuration Int?
  sets        Int?
  reps        Int?
  setsRest    Int?
  repsRest    Int?
  resistance  String?
  effort      String?
  focus       String?
  
  author      User     @relation("WorkoutAuthor", fields: [authorId], references: [id])
  authorId    String
  
  image       String?
  video       String?

  exercise    Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  exerciseId  String @unique
}

enum Level {
  EASY
  MEDIUM
  HARD
}

model Log {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId String

  user       User     @relation(fields: [userId], references: [id])
  userId     String

  completePerc Int?
  level        Level?
  comment      String?
  weight       Int?

  likedBy      User[]   @relation("LogLikes")
}

model WorkoutSession {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  author       User     @relation("SessionAuthor", fields: [authorId], references: [id])
  authorId     String
  level        Level?
  tags         Tag[]
  category     Category
  title        String
  description  String?
  duration     Int?
  image        String?
  exercises    Exercise[]
}